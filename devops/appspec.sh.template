#!/bin/bash

SCRIPT_MODE="$TF_VAR_ENV_APP_GL_SCRIPT_MODE"

source_folder=$TF_VAR_ENV_APP_BE_LOCAL_SOURCE_FOLDER

if [ "$SCRIPT_MODE" == "CLOUDOCKER" ]
then

    #creation des volumes et positionnement des permissions
    mkdir -p $source_folder/data/alf-repo-data
    chown -R 33000 $source_folder/data/alf-repo-data

    mkdir -p $source_folder/logs/alfresco
    chown -R 33000 $source_folder/logs/alfresco

    mkdir -p $source_folder/data/solr-data
    chown 33007 $source_folder/data/solr-data

    mkdir -p $source_folder/data/postgres-data
    chown -R 999 $source_folder/data/postgres-data

    mkdir -p $source_folder/logs/postgres
    chown -R 999 $source_folder/logs/postgres

    mkdir -p $source_folder/data/activemq-data
    chown -R 33031 $source_folder/data/activemq-data

    #connexion au repo docker AWS
    aws ecr get-login-password --region $TF_VAR_ENV_APP_GL_AWS_REGION_ECR | docker login --username AWS --password-stdin $TF_VAR_ENV_APP_GL_AWS_ACCOUNT_ID.dkr.ecr.$TF_VAR_ENV_APP_GL_AWS_REGION_ECR.amazonaws.com

    #lancement des containers
    docker compose -f $source_folder/docker-compose.yml up -d --build --force-recreate

    #plannification du backup toutes les 2 minutes
    chmod +x $source_folder/backup.sh

    if [ $(crontab -l | grep "$source_folder/backup.sh") ] 
    then
        echo "already scheduled"
    else
        echo "to be scheduled"
        crontab -l > tmpcron
        #echo new cron into cron file
        echo "*/2 * * * * $source_folder/backup.sh" >> tmpcron
        #install new cron file
        crontab tmpcron
        rm tmpcron

    fi

fi

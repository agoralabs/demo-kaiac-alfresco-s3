#!/bin/sh

source_folder=$TF_VAR_ENV_APP_BE_LOCAL_SOURCE_FOLDER
s3_bucket_backup="$TF_VAR_ENV_APP_GL_DEVOPS_BACKUP_S3_BUCKET"
data_file="$TF_VAR_ENV_APP_GL_DEVOPS_BACKUP_FILENAME"
restored_file="restored_data.zip"
# get the files from S3
aws s3api head-object --bucket $s3_bucket_backup --key $data_file || NOT_EXIST=true
if [ $NOT_EXIST ]; then
  echo "File does not exist."
else
  rm -rf $source_folder/restore
  mkdir $source_folder/restore
  #récupération du backup
  aws s3 cp s3://$s3_bucket_backup/$data_file ./$restored_file
  cd $source_folder/restore
  unzip -qq $source_folder/$restored_file
  
  #arrêt des containers et suppression des volumes
  docker compose -f $source_folder/docker-compose.yml down
  #docker volume rm $(docker volume ls -q | grep alfresco_postgres)
  docker volume rm $(docker volume ls -q)

  #deploiement de postgre seul
  docker compose -f $source_folder/docker-compose.yml up -d postgres

  #chargement du dump
  #cat $source_folder/restore/pg-dump.sql | docker compose exec -T postgres psql --username alfresco --password alfresco
  #cat $source_folder/restore/pg-dump.sql | docker compose run postgres psql --username alfresco --password alfresco

  docker cp $source_folder/restore/pg-dump.sql $(docker ps -q --filter name=postgres):/
  #docker compose exec postgres $(psql --username alfresco --password alfresco < /pg-dump.sql)
  docker compose exec postgres sh -c "PGPASSWORD=alfresco psql --username alfresco --password alfresco < /pg-dump.sql"
  #docker compose exec postgres sh -c "pg_restore --no-privileges --no-owner --dbname=postgresql://alfresco:alfresco@localhost:5432/alfresco /pg-dump.sql"

  #Arrêt de postgres
  docker compose -f $source_folder/docker-compose.yml down

  #restauration des données
  cp -r $source_folder/restore/alf-repo-data $source_folder/data
  chown -R 33000 $source_folder/data/alf-repo-data
  
  #lancement des containers
  docker compose -f $source_folder/docker-compose.yml up -d --build --force-recreate


fi

